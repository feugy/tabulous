fragment lightPlayer on Player {
  id
  username
  playing
}

fragment mesh on Mesh {
  id
  texture
  faceUV
  x
  y
  z
  shape
  file
  width
  height
  depth
  edges
  prismRotation
  diameter
  borderRadius
  detailable {
    frontImage
    backImage
  }
  movable {
    duration
    snapDistance
    kind
  }
  flippable {
    isFlipped
    duration
  }
  rotable {
    angle
    duration
  }
  stackable {
    stackIds
    duration
    extent
    kinds
    priority
  }
  anchorable {
    anchors {
      id
      x
      y
      z
      width
      height
      depth
      diameter
      extent
      kinds
      priority
      snappedId
      playerId
    }
    duration
  }
  drawable {
    unflipOnPick
    flipOnPlay
    duration
  }
  lockable {
    isLocked
  }
}

fragment fullGame on Game {
  id
  kind
  players {
    ...lightPlayer
  }
  meshes {
    ...mesh
  }
  messages {
    playerId
    text
    time
  }
  cameras {
    playerId
    index
    target
    alpha
    beta
    elevation
    hash
  }
  hands {
    playerId
    meshes {
      ...mesh
    }
  }
  rulesBookPageCount
  zoomSpec {
    min
    max
    initial
    hand
  }
  tableSpec {
    width
    height
    texture
  }
}

mutation createGame($kind: String!) {
  createGame(kind: $kind) {
    id
  }
}

mutation deleteGame($gameId: ID!) {
  deleteGame(gameId: $gameId) {
    id
  }
}

mutation invite($gameId: ID!, $playerId: ID!) {
  invite(gameId: $gameId, playerId: $playerId) {
    ...fullGame
  }
}

subscription listGames {
  listGames {
    id
    created
    kind
    players {
      ...lightPlayer
    }
    locales {
      fr {
        title
      }
    }
  }
}

query loadGame($gameId: ID!) {
  loadGame(gameId: $gameId) {
    ...fullGame
  }
}

query loadGamePlayers($gameId: ID!) {
  loadGame(gameId: $gameId) {
    players {
      ...lightPlayer
    }
  }
}

mutation saveGame($game: GameInput!) {
  saveGame(game: $game) {
    id
  }
}
