fragment lightPlayer on GamePlayer {
  id
  username
  avatar
  currentGameId
  isGuest
  isOwner
}

fragment mesh on Mesh {
  id
  texture
  faceUV
  x
  y
  z
  shape
  transform {
    yaw
    pitch
    roll
    scaleX
    scaleY
    scaleZ
  }
  file
  width
  height
  depth
  edges
  diameter
  borderRadius
  faces
  detailable {
    frontImage
    backImage
  }
  movable {
    duration
    snapDistance
    kind
    partCenters {
      x
      y
      z
    }
  }
  flippable {
    isFlipped
    duration
  }
  rotable {
    angle
    duration
  }
  stackable {
    stackIds
    duration
    extent
    kinds
    priority
    angle
  }
  anchorable {
    anchors {
      id
      x
      y
      z
      width
      height
      depth
      diameter
      enabled
      extent
      kinds
      priority
      snappedIds
      playerId
      ignoreParts
      angle
      flip
      max
    }
    duration
  }
  drawable {
    unflipOnPick
    flipOnPlay
    angleOnPick
    duration
  }
  lockable {
    isLocked
  }
  quantifiable {
    quantity
    duration
    extent
    kinds
    priority
  }
  randomizable {
    face
    duration
    canBeSet
  }
}

fragment fullGame on Game {
  id
  kind
  engineScript
  players {
    ...lightPlayer
  }
  availableSeats
  meshes {
    ...mesh
  }
  messages {
    playerId
    text
    time
  }
  cameras {
    playerId
    index
    target
    alpha
    beta
    elevation
    hash
  }
  hands {
    playerId
    meshes {
      ...mesh
    }
  }
  preferencesString
  rulesBookPageCount
  zoomSpec {
    min
    max
    hand
  }
  tableSpec {
    width
    height
    texture
  }
  colors {
    base
    primary
    secondary
  }
  actions {
    button1
    button2
  }
  history {
    time
    playerId
    meshId
    duration
    fromHand
    ... on PlayerAction {
      fn
      argsStr
      revertStr
    }
    ... on PlayerMove {
      pos
      prev
    }
  }
}

fragment lightGame on Game {
  id
  created
  kind
  players {
    ...lightPlayer
  }
  locales {
    fr {
      title
    }
    en {
      title
    }
  }
}

fragment gameData on GameOrParameters {
  ... on Game {
    ...fullGame
  }
  ... on GameParameters {
    schemaString
    error
    id
    kind
    players {
      ...lightPlayer
    }
    preferencesString
    rulesBookPageCount
    availableSeats
    colors {
      base
      primary
      secondary
    }
  }
}

mutation createGame($kind: String) {
  createGame(kind: $kind) {
    ...lightGame
  }
}

mutation deleteGame($gameId: ID!) {
  deleteGame(gameId: $gameId) {
    id
  }
}

mutation invite($gameId: ID!, $playerIds: [ID!]!) {
  invite(gameId: $gameId, playerIds: $playerIds) {
    id
  }
}

mutation kick($gameId: ID!, $playerId: ID!) {
  kick(gameId: $gameId, playerId: $playerId) {
    id
  }
}

query listGames {
  listGames {
    ...lightGame
  }
}

subscription receiveGameListUpdates {
  receiveGameListUpdates {
    ...lightGame
  }
}

subscription receiveGameUpdates($gameId: ID!) {
  receiveGameUpdates(gameId: $gameId) {
    ...fullGame
  }
}

mutation promoteGame($gameId: ID!, $kind: String!) {
  promoteGame(gameId: $gameId, kind: $kind) {
    ...gameData
  }
}

mutation joinGame($gameId: ID!, $parameters: String) {
  joinGame(gameId: $gameId, parameters: $parameters) {
    ...gameData
  }
}

mutation getGamePlayers($id: ID!) {
  joinGame(gameId: $id) {
    ... on Game {
      players {
        ...lightPlayer
      }
    }
    ... on GameParameters {
      players {
        ...lightPlayer
      }
    }
  }
}

mutation saveGame($game: GameInput!) {
  saveGame(game: $game) {
    id
  }
}
