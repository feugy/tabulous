# import Player from "players.graphql"

type Game {
  id: ID!
  kind: String!
  created: Float!
  players: [Player]!
  scene: GameScene!
  messages: [Message]
  cameras: [CameraPosition]
  rulesBookPageCount: Int
}

type GameScene {
  cards: [Card]!
  roundTokens: [RoundToken]!
  roundedTiles: [RoundedTile]!
  boards: [Board]!
}

type ImageDefs {
  front: String!
  back: String
}

type FlippableState {
  isFlipped: Boolean
  duration: Int
}

type RotableState {
  angle: Float
  duration: Int
}

type MovableState {
  duration: Int
  snapDistance: Float
  kind: String
}

type StackableState {
  stack: [String]
  duration: Int
  extent: Float
  kinds: [String]
  isCylindric: Boolean
}

type AnchorableState {
  anchors: [Anchor]
  duration: Int
}

type Anchor {
  x: Float
  y: Float
  z: Float
  width: Float
  height: Float
  depth: Float
  kinds: [String]
}

type Card {
  id: ID!
  texture: String!
  images: ImageDefs!
  width: Float
  height: Float
  depth: Float
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableState
  flippable: FlippableState
  rotable: RotableState
  anchorable: AnchorableState
  stackable: StackableState
}

type RoundToken {
  id: ID!
  texture: String!
  images: ImageDefs!
  x: Float
  y: Float
  z: Float
  diameter: Float
  height: Float
  detailable: Boolean
  movable: MovableState
  flippable: FlippableState
  rotable: RotableState
  anchorable: AnchorableState
  stackable: StackableState
}

type RoundedTile {
  id: ID!
  texture: String!
  images: ImageDefs!
  width: Float
  height: Float
  depth: Float
  borderRadius: Float
  borderColor: [Float]
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableState
  flippable: FlippableState
  rotable: RotableState
  anchorable: AnchorableState
  stackable: StackableState
}

type Board {
  id: ID!
  texture: String!
  width: Float
  height: Float
  depth: Float
  borderRadius: Float
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableState
  flippable: FlippableState
  rotable: RotableState
  anchorable: AnchorableState
  stackable: StackableState
}

type Message {
  playerId: ID!
  text: String!
  time: Float!
}

type CameraPosition {
  playerId: ID!
  index: Float!
  target: [Float]!
  alpha: Float!
  beta: Float!
  elevation: Float!
  hash: String!
}

input GameInput {
  id: ID!
  scene: GameSceneInput
  messages: [MessageInput]
  cameras: [CameraPositionInput]
}

input ImageDefsInput {
  front: String!
  back: String
}

input FlippableStateInput {
  isFlipped: Boolean
  duration: Int
}

input RotableStateInput {
  angle: Float
  duration: Int
}

input MovableStateInput {
  duration: Int
  snapDistance: Float
  kind: String
}

input StackableStateInput {
  stack: [String]
  duration: Int
  extent: Float
  kinds: [String]
  isCylindric: Boolean
}

input AnchorableStateInput {
  anchors: [AnchorInput]
  duration: Int
}

input AnchorInput {
  x: Float
  y: Float
  z: Float
  width: Float
  height: Float
  depth: Float
  kinds: [String]
}

input GameSceneInput {
  cards: [CardInput]!
  roundTokens: [RoundTokenInput]!
  roundedTiles: [RoundedTileInput]!
  boards: [BoardInput]!
}

input CardInput {
  id: ID!
  texture: String!
  images: ImageDefsInput!
  width: Float
  height: Float
  depth: Float
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableStateInput
  flippable: FlippableStateInput
  rotable: RotableStateInput
  anchorable: AnchorableStateInput
  stackable: StackableStateInput
}

input CardInput {
  id: ID!
  texture: String!
  images: ImageDefsInput!
  width: Float
  height: Float
  depth: Float
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableStateInput
  flippable: FlippableStateInput
  rotable: RotableStateInput
  anchorable: AnchorableStateInput
  stackable: StackableStateInput
}

input RoundTokenInput {
  id: ID!
  texture: String!
  images: ImageDefsInput!
  x: Float
  y: Float
  z: Float
  diameter: Float
  height: Float
  detailable: Boolean
  movable: MovableStateInput
  flippable: FlippableStateInput
  rotable: RotableStateInput
  anchorable: AnchorableStateInput
  stackable: StackableStateInput
}

input RoundedTileInput {
  id: ID!
  texture: String!
  images: ImageDefsInput!
  width: Float
  height: Float
  depth: Float
  borderRadius: Float
  borderColor: [Float]
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableStateInput
  flippable: FlippableStateInput
  rotable: RotableStateInput
  anchorable: AnchorableStateInput
  stackable: StackableStateInput
}

input BoardInput {
  id: ID!
  texture: String!
  width: Float
  height: Float
  depth: Float
  borderRadius: Float
  x: Float
  y: Float
  z: Float
  detailable: Boolean
  movable: MovableStateInput
  flippable: FlippableStateInput
  rotable: RotableStateInput
  anchorable: AnchorableStateInput
  stackable: StackableStateInput
}

input MessageInput {
  playerId: ID!
  text: String!
  time: Float!
}

input CameraPositionInput {
  playerId: ID!
  index: Float!
  target: [Float]!
  alpha: Float!
  beta: Float!
  elevation: Float!
  hash: String!
}

type Query {
  loadGame(gameId: ID!): Game
}

type Mutation {
  createGame(kind: String!): Game
  saveGame(game: GameInput!): Game
  deleteGame(gameId: ID!): Game
  invite(gameId: ID!, playerId: ID!): Game
}

type Subscription {
  listGames: [Game]
}
