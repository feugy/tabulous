type Player {
  id: ID!
  username: String!
  currentGameId: ID
  isGuest: Boolean
  isOwner: Boolean
  avatar: String
  provider: String
  email: String
  termsAccepted: Boolean
  isAdmin: Boolean
}

type TurnCredentials {
  username: String!
  credentials: String!
}

type PlayerWithTurnCredentials {
  token: String!
  player: Player!
  turnCredentials: TurnCredentials!
}

type PlayerListResult {
  total: Int!
  from: Int!
  size: Int!
  results: [Player]!
}

type Query {
  getCurrentPlayer: PlayerWithTurnCredentials
  searchPlayers(search: String!, includeCurrent: Boolean): [Player]
  listPlayers(from: Int, size: Int): PlayerListResult
}

type Mutation {
  addPlayer(id: ID!, username: String!, password: String!): Player
  logIn(id: ID!, password: String!): PlayerWithTurnCredentials
  acceptTerms: Player
  updateCurrentPlayer(username: String, avatar: String): Player
  deletePlayer(id: ID!): Player
}
