type Player {
  id: ID!
  username: String!
  currentGameId: ID
  avatar: String
  provider: String
  email: String
  termsAccepted: Boolean
  isAdmin: Boolean
  usernameSearchable: Boolean
}

type Friendship {
  player: Player!
  isRequest: Boolean
  isProposal: Boolean
}

type FriendshipUpdate {
  from: Player!
  requested: Boolean
  proposed: Boolean
  accepted: Boolean
  declined: Boolean
}

type TurnCredentials {
  username: String!
  credentials: String!
}

type PlayerWithTurnCredentials {
  token: String!
  player: Player!
  turnCredentials: TurnCredentials!
}

type PlayerListResult {
  total: Int!
  from: Int!
  size: Int!
  results: [Player]!
}

type Query {
  getCurrentPlayer: PlayerWithTurnCredentials!
  listFriends: [Friendship!]!
  searchPlayers(search: String!, includeCurrent: Boolean): [Player!]!
  listPlayers(from: Int, size: Int): PlayerListResult!
}

type Mutation {
  addPlayer(id: ID!, username: String!, password: String!): Player!
  logIn(id: ID!, password: String!): PlayerWithTurnCredentials!
  acceptTerms: Player!
  updateCurrentPlayer(
    username: String
    avatar: String
    usernameSearchable: Boolean
  ): Player!
  deletePlayer(id: ID!): Player
  sendFriendRequest(id: ID!): Boolean!
  requestFriendship(id: ID!): Boolean!
  acceptFriendship(id: ID!): Boolean!
  endFriendship(id: ID!): Boolean!
}

extend type Subscription {
  receiveFriendshipUpdates: FriendshipUpdate!
}
